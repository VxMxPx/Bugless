// Generated by CoffeeScript 1.3.1
(function() {
  var Bugless, Log, Messages, Select, Tags;

  Bugless = (function() {
    var controllers, register, run;
    controllers = {};
    run = function(controllerName) {
      return controllers[controllerName]();
    };
    register = function(controllerName, code) {
      return controllers[controllerName] = code;
    };
    return {
      run: run,
      register: register
    };
  })();

  Log = (function() {
    var add;
    add = function(message, type) {
      if (type == null) {
        type = 'log';
      }
      if (typeof console === 'object') {
        return console[type](message);
      }
    };
    return {
      add: add
    };
  })();

  Messages = (function() {
    var $list;
    $list = $('#messages');
    if ($list.length) {
      $list.fadeIn();
      setTimeout(function() {
        return $list.fadeOut();
      }, 8000);
      $list.on('click', '.mItem', function() {
        return $(this).fadeOut(120);
      });
      $list.on('mouseenter', '.mItem', function() {
        return $(this).addClass('over');
      });
      return $list.on('mouseleave', '.mItem', function() {
        return $(this).removeClass('over');
      });
    }
  })();

  Select = (function() {
    var connect;
    connect = function(first, second, values, defaults) {
      return $(first).each(function() {
        var $this, items, key, selected, val;
        $this = $(this);
        items = '';
        defaults = defaults || [false, false];
        selected = '';
        Log.add(defaults);
        $this.on('change keyup', function() {
          return $(second).each(function() {
            var key, val, _ref;
            items = '';
            _ref = values[$this.attr('value')];
            for (key in _ref) {
              val = _ref[key];
              if (!(key)) {
                continue;
              }
              selected = defaults[1] === key && defaults[0] === $this.attr('value') ? ' selected="selected"' : '';
              items += '<option' + selected + ' value"' + key + '">' + values[$this.attr('value')][key] + '</option>';
            }
            if (items !== '') {
              $(this).html(items);
              return $(this).attr('disabled', false);
            } else {
              $(this).html('');
              return $(this).attr('disabled', 'disabled');
            }
          });
        });
        for (key in values) {
          val = values[key];
          selected = defaults[0] === key ? ' selected="selected"' : '';
          items += '<option' + selected + ' values="' + key + '">' + key + '</option>';
        }
        return $this.html(items).trigger('keyup');
      });
    };
    return {
      connect: connect
    };
  })();

  Tags = function(container, url) {
    var $addButton, $container, $input, tagsRequest;
    $container = $(container);
    $input = $container.find('input.tags');
    $addButton = $container.find('a.button.tags');
    tagsRequest = function(values, url) {
      return $.ajax({
        type: 'POST',
        url: url,
        data: {
          'tags': values
        },
        dataType: 'json'
      }).success(function(data) {
        return Log.add(data, 'log');
      });
    };
    $input.on('keypress', function(event) {
      if (event.which === 13) {
        tagsRequest($input.val(), url);
        return event.preventDefault();
      }
    });
    return $addButton.on('click', function() {
      return tagsRequest($input.val(), url);
    });
  };

  Bugless.register("Users", function() {
    if (typeof timezoneArray !== 'undefined') {
      return Select.connect('select.tz_continent', 'select.tz_country', timezoneArray, defaultsItems);
    }
  });

  window.Bugless = Bugless;

}).call(this);
